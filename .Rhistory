1+2
x<-1:4
x
y<-5:8
plot(x,y)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(rJava)
install.packages("rJava")
library(xlsx)
library(rJava)
library(xlsx)
install.packages("rJava")
library(rJava)
library(rJava)
library(xlsx)
q()
library(VennDiagram)
venn.plot<-draw.pairwise.venn(14+13,131+13,13,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","white","white"))
venn.plot<-draw.pairwise.venn(14+13,131+13,13,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
library(VennDiagram)
venn.plot<-draw.pairwise.venn(14+13,131+13,13,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(14+13,131+13,13,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","white","black"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","white","black"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","black"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","white","black"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","white","white"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","black","white"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","black","white"))
venn.plot<-draw.pairwise.venn(4,64,2,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","black","black"))
venn.plot<-draw.pairwise.venn(50,50,14,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("black","black","black"))
venn.plot<-draw.pairwise.venn(50,50,14,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(50,50,14,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(35,27,7,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(35,27,7,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(35,27,7,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(11,4,1,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
venn.plot<-draw.pairwise.venn(11,4,1,fill=c("midnightblue","darkred"),lty="blank",alpha=0.8,cex=2,label.col = c("white","white","white"))
library(affycoretools)
library(affy)
library("RColorBrewer")
plotPCA
?plotPCA
source("http://bioconductor.org/biocLite.R")
biocLite("affycoretools")
library(affycoretools)
library(affy)
library("RColorBrewer")
### data cleanup
IgG<-read.delim("data_IgG.txt",header=TRUE,row.names=1,sep = "\t",as.is=TRUE)
head(IgG)
oddvals <- seq(1, ncol(IgG), by=2)
oddvals
IgG1<-IgG[,oddvals]
head(IgG1)
write.table(IgG1, file = "data1_IgG.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names = TRUE)
IgM<-read.delim("data_IgM.txt",header=TRUE,row.names=1,sep = "\t",as.is=TRUE)
head(IgM)
oddvals <- seq(1, ncol(IgM), by=2)
oddvals
IgM1<-IgM[,oddvals]
head(IgM1)
write.table(IgM1, file = "data1_IgM.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names = TRUE)
### target files
target<-read.delim("target.txt",header=TRUE,sep = "\t",as.is=TRUE)
head(target)
target_Cxcl13<-target[target$Protocol..=="40114",]
target_Cxcl13
target_CD40l_old<-target[target$Protocol..=="50714",]
target_CD40l_old
target_CD40l_extend<-target[target$Protocol..=="111913",]
target_CD40l_extend
write.table(target_Cxcl13, file = "target_Cxcl13.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names = TRUE)
write.table(target_CD40l_old, file = "target_CD40l_old.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names = TRUE)
write.table(target_CD40l_extend, file = "target_cD40l_extend.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names = TRUE)
library(affycoretools)
library(affy)
library("RColorBrewer")
setwd("H:/Tamer's data/Microarray data")
4+8+13+14+18+17
18+26+30
27+18+28
18+21+14+20
txt <- paste("TOPHATPATH","tophat2 ","-o ","OUTDIR","filex"," -p 2 --solexa1.3-quals -G ",ANNO," ","--rg-id ",filex," --rg-sample ",filex," --rg-library Shotgun --rg-platform Illumina ",REFGENOME," ",dirx,f[i]," ",dirx,f[i+1],sep="")
txt <- paste("TOPHATPATH","tophat2 ","-o ","OUTDIR","filex"," -p 2 --solexa1.3-quals -G ","ANNO"," ","--rg-id ",filex," --rg-sample ",filex," --rg-library Shotgun --rg-platform Illumina ",REFGENOME," ","dirx,f[i]"," ","dirx","f[i+1]",sep="")
txt <- paste("TOPHATPATH","tophat2 ","-o ","OUTDIR","filex"," -p 2 --solexa1.3-quals -G ","ANNO"," ","--rg-id ",filex," --rg-sample ",filex," --rg-library Shotgun --rg-platform Illumina ",REFGENOME," ","dirx","f[i]"," ","dirx","f[i+1]",sep="")
txt <- paste("TOPHATPATH","tophat2 ","-o ","OUTDIR","filex"," -p 2 --solexa1.3-quals -G ","ANNO"," ","--rg-id ","filex"," --rg-sample ",filex," --rg-library Shotgun --rg-platform Illumina ",REFGENOME," ","dirx","f[i]"," ","dirx","f[i+1]",sep="")
txt <- paste("TOPHATPATH","tophat2 ","-o ","OUTDIR","filex"," -p 2 --solexa1.3-quals -G ","ANNO"," ","--rg-id ","filex"," --rg-sample ","filex"," --rg-library Shotgun --rg-platform Illumina ",REFGENOME," ","dirx","f[i]"," ","dirx","f[i+1]",sep="")
txt <- paste("TOPHATPATH","tophat2 ","-o ","OUTDIR","filex"," -p 2 --solexa1.3-quals -G ","ANNO"," ","--rg-id ","filex"," --rg-sample ","filex"," --rg-library Shotgun --rg-platform Illumina ","REFGENOME"," ","dirx","f[i]"," ","dirx","f[i+1]",sep="")
txt
library(venneuler)
library(VennDiagram)
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 2,
cat.col = c("blue", "red", "green")
);
grid.draw(venn.plot);
txt <- paste("samtools sort -n ","path,i","/accepted_hits.bam ","path,i","/","i","_sort", sep="")
txt
txt <- paste("samtools view -h -o ","path,i","/","i","_nsort.sam ",path,i,"/","i","_sort.bam",sep="")
txt <- paste("samtools view -h -o ","path,i","/","i","_nsort.sam ","path,i","/","i","_sort.bam",sep="")
txt
txt <- paste("htseq-count -i gene_name ","path,i","/","i","_nsort.sam ","ANNO"," > ","path,i","/","i",".cnts",sep="")
txt
library(venneuler)
64751 *500*2*3*2*2
44084625-44047192
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
txdb <- makeTranscriptDbFromGFF("Homo_sapiens.GRCh37.68.fix.gtf",format="gtf")
library(GenomicFeatures)
txdb <- makeTranscriptDbFromGFF("Homo_sapiens.GRCh37.68.fix.gtf",format="gtf")
summary(txdb)
str(txdb)
head(exonsBy)
head(txdb)
txdb
exonsBy
txdb?exonsBy
?exonsBy
exons.list.per.gene <- exonsBy(txdb,by="gene")
exonic.gene.sizes <- lapply(exons.list.per.gene,function(x){sum(width(reduce(x)))})
head(exonic.gene.sizes)
transcript_length <- data.frame(matrix(unlist(exonic.gene.sizes))
)
head(transcript_length)
LS.df = as.data.frame(do.call(rbind, exonic.gene.sizes                              ))
head(LS.df)
transcript_length = as.data.frame(do.call(rbind, exonic.gene.sizes))
head(exonic.gene.sizes)
head(transcript_length)
transcript_length[ENSG00000118058,]
transcript_length[ENSG00000000003,]
write.table(transcript_length,"transcript_length.txt",row.names=T,sep="\t"))
write.table(transcript_length,"transcript_length.txt",row.names=T,sep="\t")
?reduce
txdb <- makeTranscriptDbFromGFF("genes.gtf",format="gtf")
exons.list.per.gene <- exonsBy(txdb,by="gene")
exonic.gene.sizes <- lapply(exons.list.per.gene,function(x){sum(width(reduce(x)))})
transcript_length = as.data.frame(do.call(rbind, exonic.gene.sizes))
head(exonic.gene.sizes)
head(transcript_length)
write.table(transcript_length,"transcript_length_igenome_genesgtf.txt",row.names=T,sep="\t")
load("H:/Somascan_Gary/.RData")
key_ns
key_ns$ID<- paste(key_ns$Other_Information, key_ns$TimePoint, key_ns$Group,sep="_")
key_ns
data<-data_RT_log
head(data)
data_ns<-subset(data,select=key_ns$SampleId)
names(data_ns)=key_ns$ID
head(data_ns)
names(data_ns)
head(data_ns)
data_ns<-cbind(Target=rownames(data_ns),data_ns)
head(data_ns)
data_ns<-data_ns[data_ns$Target%in%ns_target,]
head(data_ns)
data_ns<-cbind(Target=rownames(data_ns),data_ns)
data<-data_RT_log
head(data)
data_ns<-subset(data,select=key_ns$SampleId)
head(data_ns)
data_ns<-as.data.frame(data_ns)
head(data_ns)
data_ns<-cbind(Target=rownames(data_ns),data_ns)
data_ns<-data_ns[data_ns$Target%in%ns_target,]
head(data_ns)
data_ns<-data_ns[,-1]
y<-as.matrix(data_ns)
heatmap.2(y,scale="row", key=TRUE, symkey=FALSE, keysize=1,density.info="none", trace="none", cexRow=1.5,cexCol=1.3, Rowv=FALSE, Colv=TRUE,col=rev(redgreen(75)),margins=c(10,20))
library(gplots)
heatmap.2(y,scale="row", key=TRUE, symkey=FALSE, keysize=1,density.info="none", trace="none", cexRow=1.5,cexCol=1.3, Rowv=FALSE, Colv=TRUE,col=rev(redgreen(75)),margins=c(10,20))
heatmap.2(y,scale="row", key=TRUE, symkey=FALSE, keysize=1,density.info="none", trace="none", cexRow=1.5,cexCol=1.3, Rowv=TRUE, Colv=FALSE,col=rev(redgreen(75)),margins=c(10,20))
key_ns
length(li_8h[li_8h$adj.P.Val<=0.05&li_8h$logFC>=log2(1.5),]$Target)
length(li_8h[li_8h$adj.P.Val<=0.05&li_8h$logFC<=log2(1/1.5),]$Target)
length(li_12h[li_12h$adj.P.Val<=0.05&li_12h$logFC>=log2(1.5),]$Target)
length(li_12h[li_12h$adj.P.Val<=0.05&li_12h$logFC<=log2(1/1.5),]$Target)
length(li_24h[li_24h$adj.P.Val<=0.05&li_24h$logFC>=log2(1.5),]$Target)
length(li_24h[li_24h$adj.P.Val<=0.05&li_24h$logFC<=log2(1/1.5),]$Target)
li_8h_up<-li_8h[li_8h$adj.P.Val<=0.05&li_8h$logFC>=log2(1.5),]$Target
li_12h_up<-li_12h[li_12h$adj.P.Val<=0.05&li_12h$logFC>=log2(1.5),]$Target
li_24h_up<-li_24h[li_24h$adj.P.Val<=0.05&li_24h$logFC>=log2(1.5),]$Target
li_up=list(LIvsLPS_8h_up=li_8h_up,LIvsLPS_12h_up=li_12h_up,LIvsLPS_24h_up=li_24h_up)
venn(li_up)
library(gplots)
library(gplots)
venn(li_up)
li_8h_down<-li_8h[li_8h$adj.P.Val<=0.05&li_8h$logFC<=log2(1/1.5),]$Target
li_12h_down<-li_12h[li_12h$adj.P.Val<=0.05&li_12h$logFC<=log2(1/1.5),]$Target
li_24h_down<-li_24h[li_24h$adj.P.Val<=0.05&li_24h$logFC<=log2(1/1.5),]$Target
li_down=list(LIvsLPS_8h_down=li_8h_down,LIvsLPS_12h_down=li_12h_down,LIvsLPS_24h_down=li_24h_down)
venn(li_down)
length(lp_8h[lp_8h$adj.P.Val<=0.05&lp_8h$logFC>=log2(1.5),]$Target)
length(lp_8h[lp_8h$adj.P.Val<=0.05&lp_8h$logFC<=log2(1/1.5),]$Target)
length(lp_12h[lp_12h$adj.P.Val<=0.05&lp_12h$logFC>=log2(1.5),]$Target)
length(lp_12h[lp_12h$adj.P.Val<=0.05&lp_12h$logFC<=log2(1/1.5),]$Target)
length(lp_24h[lp_24h$adj.P.Val<=0.05&lp_24h$logFC>=log2(1.5),]$Target)
length(lp_24h[lp_24h$adj.P.Val<=0.05&lp_24h$logFC<=log2(1/1.5),]$Target)
lp_8h_up<-lp_8h[lp_8h$adj.P.Val<=0.05&lp_8h$logFC>=log2(1.5),]$Target
lp_12h_up<-lp_12h[lp_12h$adj.P.Val<=0.05&lp_12h$logFC>=log2(1.5),]$Target
lp_24h_up<-lp_24h[lp_24h$adj.P.Val<=0.05&lp_24h$logFC>=log2(1.5),]$Target
lp_up=lpst(LPvsLPS_8h_up=lp_8h_up,LPvsLPS_12h_up=lp_12h_up,LPvsLPS_24h_up=lp_24h_up)
lp_up=list(LPvsLPS_8h_up=lp_8h_up,LPvsLPS_12h_up=lp_12h_up,LPvsLPS_24h_up=lp_24h_up)
venn(lp_up)
lp_8h_down<-lp_8h[lp_8h$adj.P.Val<=0.05&lp_8h$logFC<=log2(1/1.5),]$Target
lp_12h_down<-lp_12h[lp_12h$adj.P.Val<=0.05&lp_12h$logFC<=log2(1/1.5),]$Target
lp_24h_down<-lp_24h[lp_24h$adj.P.Val<=0.05&lp_24h$logFC<=log2(1/1.5),]$Target
lp_down=list(LPvsLPS_8h_down=lp_8h_down,LPvsLPS_12h_down=lp_12h_down,LPvsLPS_24h_down=lp_24h_down)
venn(lp_down)
library(limma)
?lmFit
?eBayes
library(venneuler)
library(venneuler)
143*2685
198*1802
143*1802
50/1.66/1.66
display.brewer.all()
load("H:/Somascan_Gary/.RData")
rm(list=ls(0))
rm(list=ls())
load("H:/Somascan_Gary/.RData")
head(data)
head(R_Nostim_Time24_order)
target<-R_Nostim_Time24_order[R_Nostim_Time24_order$col=="red",]$Targer
target<-R_Nostim_Time24_order[R_Nostim_Time24_order$col=="red",]$Target
target
target12<-R_Nostim_Time24_order[R_Nostim_Time24_order$col=="red",]$Target
target12
target12<-R_Nostim_Time12_order[R_Nostim_Time12_order$col=="red",]$Target
target12
target24<-R_Nostim_Time24_order[R_Nostim_Time24_order$col=="red",]$Target
target24
head(data_Nostim)
data_Nostim_target<-as.data.frame(t(data_Nostim))
data_Nostim_target<-as.data.frame(t(data_Nostim))data_Nostim_target[1:10,1:10]
data_Nostim_target[1:10,1:10]
data_Nostim_target<-subset(data_Nostim_target,select=target24)
data_Nostim_target
data_Nostim_target$Group=c(rep("8hr",3),rep("12hr",3),rep("24hr",3))
data_Nostim_target
par(mfrow=c(2,3))
for (i in 1:6){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=2)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
library(beeswarm)
par(mfrow=c(2,3))
for (i in 1:6){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=2)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
str(data_Nostim_target
)
data_Nostim_target$Group=as.factor(c(rep("8hr",3),rep("12hr",3),rep("24hr",3)))
levels(data_Nostim_target$Group)=c("8hr","12hr","24hr")
library(beeswarm)
par(mfrow=c(2,3))
for (i in 1:6){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=2)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=2)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
par(mfrow=c(2,3))
for (i in 1:6){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
par(mfrow=c(2,3))
for (i in 1:6){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1.5)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
par(mfrow=c(2,3))
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
dev.off()
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1.5)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
dev.off()
par(mfrow=c(2,3))
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1.5)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
load("H:/Somascan_Gary/.RData")
head(data_Nostim)
data_Nostim_target<-as.data.frame(t(data_Nostim))
data_Nostim_target[1:10,1:10]
data_Nostim_target<-subset(data_Nostim_target,select=target24)
data_Nostim_target
data_Nostim_target$Group=as.factor(c(rep("8hr",3),rep("12hr",3),rep("24hr",3)))
library(beeswarm)
par(mfrow=c(2,3))
for (i in 1:6){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1.5)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
for (i in 7:10){
beeswarm(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target,pch=19,col="darkgrey",main=as.character(names(data_Nostim_target)[i]),ylab="log2 (Signal intensity)",cex.main=1.5)
bxplot(as.numeric(as.character(data_Nostim_target[,i])) ~ Group, data = data_Nostim_target, add = TRUE,width=0.5)
}
library("HTqPCR")
install.packages("KernSmooth")
library("HTqPCR")
data(qPCRpros)
rm(list=ls(0))
rm(list=ls())
data(qPCRpros)
path <- system.file("exData", package = "HTqPCR")
head(read.delim(file.path(path, "files.txt")))
files <- read.delim(file.path(path, "files.txt"))
raw <- readCtData(files = files$File, path = path)
show(raw)
raw
featureNames(raw[1;10])
featureNames(raw[1:10])
featurename<-featureNames(raw)
featurename
sampleNames(raw)
head(exprs(raw))
exp<-expres(raw)
exp<-exprs(raw)
View(exp)
head(exp)
exp<-cbind(ID<-rownames(exp),exp)
exp
exp<-exprs(raw)
exp<-as.data.frame(cbind(ID<-rownames(exp),exp))
head(exp)
table(exp$V1)
flag(raw)
featureType(raw)
featurePos(raw)
featureClass(raw)
featureCategory(raw)
View(exp)
data(qPCRpros)
qPCRpros@phenodata$sample
qPCRpros@phenoSata$sample
qPCRpros@phenoData$sample
qPCRpros@featureData$data
qPCRpros@featureData@data
?readCtData
exPath <- system.file("exData", package = "HTqPCR")
exFiles <- "BioMark_sample.csv"
temp <- read.delim(file.path(exPath, exFiles), skip = 11,
sep = ",", colClasses = "character")
n <- 48
head(temp)
mat <- matrix(as.numeric(temp$Value), ncol = n, nrow = n,
byrow = FALSE)
head(mat)
mat[mat > 40] <- NA
raw <- new("qPCRset", exprs = mat, featureCategory = as.data.frame(array("OK",
c(n, n))))
exprs(rao)
head(exprs(raw))
featureCategory(raw)
as.data.frame(array("OK",c(n, n))
)
sampleNames(raw) <- paste("S", 1:n, sep = "")
sampleNames(raw)
featureNames(raw) <- paste("A", 1:n, sep = "")
featureNames(raw)
head(temp)
171/56
167/56
d<-data.frame(ID=c(rep("1",4),rep("2",3),rep("3",3)),cohort=c(rep("1",6),rep("2",4)))
d
d<-data.frame(ID=c(rep("1",4),rep("2",3),rep("3",3)),cohort=c(rep("1",7),rep("2",3)))
table(d$ID,d$cohort)
table<-table(d$ID,d$cohort)
install.packages("shiny")
library(shiny)
rm(list=ls())
library(shiny)
setwd("H:/Coursera/Developing data product/project")
runApp()
runApp()
runApp()
110/1.66/1.66
100/1.66/1.66
50/1.66/1.66
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
